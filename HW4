--1
/* Write a join query that returns the role, total number of films, and average order in the credits when Nicolas Cage has played each of these roles. Sort the results in descending order by total number of films. */
SELECT Principals.Role, COUNT(Distinct(Principals.MovieID)) AS TotalNumberOfFilms, ROUND(AVG(Principals.CreditOrder),0) AS AverageOrderInCredits
FROM PRINCIPALS JOIN PEOPLE
ON PRINCIPALS.PersonID = PEOPLE.PersonID
WHERE PEOPLE.PersonID = 'nm0000115'
GROUP BY Principals.Role
ORDER BY COUNT(Principals.Role) DESC;

--2
/* Write a subquery that finds all of the movies released since 2010 (inclusive) that made a profit below the average of all of Cageâ€™s movies. Return the movie title, release date, MPAA rating, and profit. Sort results from least profitable to most profitable. */
SELECT Title, ReleaseDate, MPAA, TO_CHAR((BoxOffice-ProductionCost), '$999,999,999,9999.99') AS Profit
FROM MOVIES JOIN PRINCIPALS ON MOVIES.MovieID = PRINCIPALS.MovieID
WHERE PRINCIPALS.PersonID = 'nm0000115'
AND Movies.ReleaseDate >= '01/01/2010'
AND (BoxOffice-ProductionCost) < 
(SELECT AVG(BoxOffice - ProductionCost)
FROM MOVIES)
ORDER BY PROFIT DESC;

--3
/* Write a compound query that returns the number of films, lowest IMDB score, average IMDB score, and highest IMDB score for both the drama and action genres. */
SELECT Genre, COUNT(Genre) AS GenreTotal, MIN(Rating) AS WorstRating, Max(Rating) AS BestRating, ROUND(AVG(Rating),1) AS AverageRating
FROM GENRES JOIN PRINCIPALS on GENRES.MovieID = PRINCIPALS.MovieID
JOIN MOVIES ON MOVIES.MovieID = PRINCIPALS.MovieID
WHERE GENRE = 'Action'
AND PERSONID = 'nm0000115'
GROUP BY GENRE
UNION
SELECT Genre, COUNT(Genre) AS GenreTotal, MIN(Rating) AS WorstRating, Max(Rating) AS BestRating, ROUND(AVG(Rating),1) AS AverageRating
FROM GENRES JOIN PRINCIPALS on GENRES.MovieID = PRINCIPALS.MovieID
JOIN MOVIES ON MOVIES.MovieID = PRINCIPALS.MovieID
WHERE GENRE = 'Drama'
AND PERSONID = 'nm0000115'
GROUP BY GENRE;

--4
/* Write a subquery that returns the character name, total number of appearances, year of first appearance, and year of last appearance for each character that he has played more than once. */
SELECT PRINCIPALS.CharacterName, COUNT(PRINCIPALS.MovieID) AS NumberofApperances, MIN(EXTRACT(YEAR FROM ReleaseDate)) AS FirstAppearance, MAX(EXTRACT(YEAR FROM ReleaseDate)) AS LastApperance
FROM PRINCIPALS JOIN MOVIES
ON PRINCIPALS.MovieID = MOVIES.MovieID
JOIN (SELECT PRINCIPALS.CharacterName, COUNT(PRINCIPALS.MovieID) AS NumberOfApperances
FROM PRINCIPALS
WHERE PersonID = 'nm0000115'
AND Principals.Role = 'actor'
HAVING COUNT(PRINCIPALS.MovieID) > 1
GROUP BY PRINCIPALS.CharacterName) SEQUELS
ON PRINCIPALS.CharacterName = SEQUELS.CharacterName
GROUP BY PRINCIPALS.CharacterName;


--Extra Credit
/* Write a compound query that returns the total number of movies, average IMDB score (rounded to 1 decimal place), total number of votes (displayed in proper number format with commas), and average profit (displayed in currency format) for each season. */
SELECT CASE
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (12, 01, 02) THEN 'Winter'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (03, 04, 05) THEN 'Spring'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (06, 07, 08) THEN 'Summer'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (09, 10, 11) THEN 'Fall'
END AS Season, COUNT(MOVIES.MovieID) AS TotalNumberOfMovies, ROUND(AVG(MOVIES.Rating),1) AS AverageRating, TO_CHAR(SUM(MOVIES.Votes), '999,999,999') AS TotalNumberOfVotes, TO_CHAR((AVG(MOVIES.BoxOffice-MOVIES.ProductionCost)), '$999,999,999,9999.99') AS Profit
FROM MOVIES JOIN
(SELECT MovieID, EXTRACT(MONTH FROM (ReleaseDate)) AS MONTH FROM MOVIES) MONTH
ON MOVIES.MovieID = MONTH.MovieID
WHERE MONTH.MONTH = 12 OR MONTH.MONTH = 1 or MONTH.MONTH = 2
GROUP BY CASE
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (12, 01, 02) THEN 'Winter'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (03, 04, 05) THEN 'Spring'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (06, 07, 08) THEN 'Summer'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (09, 10, 11) THEN 'Fall'
END
UNION
SELECT CASE
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (12, 01, 02) THEN 'Winter'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (03, 04, 05) THEN 'Spring'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (06, 07, 08) THEN 'Summer'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (09, 10, 11) THEN 'Fall'
END AS Season, COUNT(MOVIES.MovieID) AS TotalNumberOfMovies, ROUND(AVG(MOVIES.Rating),1) AS AverageRating, TO_CHAR(SUM(MOVIES.Votes), '999,999,999') AS TotalNumberOfVotes, TO_CHAR((AVG(MOVIES.BoxOffice-MOVIES.ProductionCost)), '$999,999,999,9999.99') AS Profit
FROM MOVIES JOIN
(SELECT MovieID, EXTRACT(MONTH FROM (ReleaseDate)) AS MONTH FROM MOVIES) MONTH
ON MOVIES.MovieID = MONTH.MovieID
WHERE MONTH.MONTH = 3 OR MONTH.MONTH = 4 or MONTH.MONTH = 5
GROUP BY CASE
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (12, 01, 02) THEN 'Winter'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (03, 04, 05) THEN 'Spring'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (06, 07, 08) THEN 'Summer'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (09, 10, 11) THEN 'Fall'
END
UNION
SELECT CASE
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (12, 01, 02) THEN 'Winter'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (03, 04, 05) THEN 'Spring'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (06, 07, 08) THEN 'Summer'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (09, 10, 11) THEN 'Fall'
END AS Season, COUNT(MOVIES.MovieID) AS TotalNumberOfMovies, ROUND(AVG(MOVIES.Rating),1) AS AverageRating, TO_CHAR(SUM(MOVIES.Votes), '999,999,999') AS TotalNumberOfVotes, TO_CHAR((AVG(MOVIES.BoxOffice-MOVIES.ProductionCost)), '$999,999,999,9999.99') AS Profit
FROM MOVIES JOIN
(SELECT MovieID, EXTRACT(MONTH FROM (ReleaseDate)) AS MONTH FROM MOVIES) MONTH
ON MOVIES.MovieID = MONTH.MovieID
WHERE MONTH.MONTH = 6 OR MONTH.MONTH = 7 or MONTH.MONTH = 8
GROUP BY CASE
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (12, 01, 02) THEN 'Winter'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (03, 04, 05) THEN 'Spring'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (06, 07, 08) THEN 'Summer'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (09, 10, 11) THEN 'Fall'
END
UNION
SELECT CASE
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (12, 01, 02) THEN 'Winter'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (03, 04, 05) THEN 'Spring'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (06, 07, 08) THEN 'Summer'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (09, 10, 11) THEN 'Fall'
END AS Season, COUNT(MOVIES.MovieID) AS TotalNumberOfMovies, ROUND(AVG(MOVIES.Rating),1) AS AverageRating, TO_CHAR(SUM(MOVIES.Votes), '999,999,999') AS TotalNumberOfVotes, TO_CHAR((AVG(MOVIES.BoxOffice-MOVIES.ProductionCost)), '$999,999,999,9999.99') AS Profit
FROM MOVIES JOIN
(SELECT MovieID, EXTRACT(MONTH FROM (ReleaseDate)) AS MONTH FROM MOVIES) MONTH
ON MOVIES.MovieID = MONTH.MovieID
WHERE MONTH.MONTH = 9 OR MONTH.MONTH = 10 or MONTH.MONTH = 11
GROUP BY CASE
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (12, 01, 02) THEN 'Winter'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (03, 04, 05) THEN 'Spring'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (06, 07, 08) THEN 'Summer'
WHEN EXTRACT(MONTH FROM (ReleaseDate)) IN (09, 10, 11) THEN 'Fall'
END
